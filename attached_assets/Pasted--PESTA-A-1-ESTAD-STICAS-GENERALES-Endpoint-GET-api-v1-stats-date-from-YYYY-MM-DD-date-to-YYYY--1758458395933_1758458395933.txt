üéØ PESTA√ëA 1: ESTAD√çSTICAS GENERALES
Endpoint: GET /api/v1/stats/?date_from=YYYY-MM-DD&date_to=YYYY-MM-DD&period=week

üìà Subpesta√±a: M√©tricas de Reservas
// Variables del endpoint /api/v1/stats/
const statsData = response.data;
// M√©tricas principales
statsData.total_reservations        // Total de reservas del per√≠odo
statsData.total_revenue             // Ingresos totales
statsData.average_occupancy         // Ocupaci√≥n promedio %
statsData.average_stay_duration     // Duraci√≥n promedio estad√≠as
// Series temporales para gr√°ficos
statsData.reservations_by_period[]  // Array de objetos:
  .period                           // "2025-09-15" (fecha per√≠odo)
  .reservations_count              // N√∫mero de reservas
  .revenue                         // Ingresos del per√≠odo
  .occupancy_rate                  // % ocupaci√≥n
// Comparativas per√≠odo anterior
statsData.growth_metrics.reservations_growth  // % crecimiento reservas
statsData.growth_metrics.revenue_growth       // % crecimiento ingresos
üè† Subpesta√±a: An√°lisis por Propiedades
// Variables de propiedades
statsData.properties_breakdown[]    // Array de propiedades:
  .property_name                    // Nombre propiedad
  .total_reservations              // Reservas totales
  .total_revenue                   // Ingresos totales  
  .occupancy_rate                  // % ocupaci√≥n
  .average_price                   // Precio promedio noche
  .total_nights                    // Noches reservadas
// Para ranking din√°mico
const topByRevenue = statsData.properties_breakdown
  .sort((a,b) => b.total_revenue - a.total_revenue);
üë• Subpesta√±a: Comportamiento de Clientes
// Distribuci√≥n de hu√©spedes
statsData.guest_distribution[]      // Array:
  .guest_count                      // N√∫mero de hu√©spedes (1,2,3,etc)
  .reservations_count              // Cu√°ntas reservas con esa cantidad
  .percentage                      // % del total
// An√°lisis temporal b√∫squedas
statsData.search_patterns.by_day_of_week[]  // Array:
  .day_name                        // "Monday", "Tuesday", etc
  .searches_count                  // B√∫squedas en ese d√≠a
  .percentage                      // % del total semanal
üîç PESTA√ëA 2: AN√ÅLISIS DE B√öSQUEDAS
Endpoint: GET /api/v1/upcoming-checkins/?days_ahead=60&limit=20&include_anonymous=true

üìÖ Subpesta√±a: Check-ins Pr√≥ximos Populares
const upcomingData = response.data;
// Informaci√≥n del per√≠odo
upcomingData.period_info.analysis_from     // "2025-09-21" 
upcomingData.period_info.analysis_to       // "2025-11-20"
upcomingData.period_info.days_ahead        // 60
// Lista de fechas trending
upcomingData.top_upcoming_checkins[]       // Array de fechas:
  .checkin_date                            // "2025-10-15"
  .weekday                                 // "Wednesday"  
  .days_until_checkin                      // 24
  .total_searches                          // 8
  .client_searches                         // 3 (registrados)
  .anonymous_searches                      // 5 (an√≥nimos)
  .avg_stay_duration                       // 3.5 d√≠as promedio
  .unique_clients_count                    // Clientes √∫nicos
  .unique_ips_count                        // IPs √∫nicas
üë§ Subpesta√±a: An√°lisis de Usuarios Buscadores
// Para cada fecha espec√≠fica:
upcomingData.top_upcoming_checkins[i].searching_clients[]  // Array:
  .client_id                               // ID √∫nico cliente
  .client_name                            // "Mar√≠a L." (enmascarado)
  .client_email                           // "mar***@gmail.com"
  .checkout_date                          // "2025-10-18" 
  .guests                                 // 4
  .property                               // "Casa Principal"
// Usuarios an√≥nimos por fecha:
upcomingData.top_upcoming_checkins[i].searching_ips[]      // Array:
  .ip_address                             // "192.168.1.xxx"
  .searches_count                         // 3 b√∫squedas
  .checkout_dates[]                       // ["2025-10-18", "2025-10-20"]
  .guests_counts[]                        // [2, 4] hu√©spedes buscados
  .properties[]                           // ["Casa A", "Casa B"]
üéØ Subpesta√±a: Oportunidades de Conversi√≥n
// Identificar alta demanda sin reservas (l√≥gica frontend):
const highDemandDates = upcomingData.top_upcoming_checkins
  .filter(date => date.total_searches > 5)  // Alta b√∫squeda
  .map(date => ({
    date: date.checkin_date,
    searches: date.total_searches,
    potential_clients: date.searching_clients.length,
    anonymous_interest: date.searching_ips.length
  }));
// Clientes que buscan repetidamente:
const repeatedSearchClients = upcomingData.top_upcoming_checkins
  .flatMap(date => date.searching_clients)
  .reduce((acc, client) => {
    acc[client.client_id] = (acc[client.client_id] || 0) + 1;
    return acc;
  }, {});
üìä Subpesta√±a: M√©tricas de B√∫squeda
// Resumen general
upcomingData.summary_metrics.total_upcoming_searches      // 45
upcomingData.summary_metrics.unique_dates_searched        // 12  
upcomingData.summary_metrics.unique_clients_searching     // 8
upcomingData.summary_metrics.unique_anonymous_ips         // 15
upcomingData.summary_metrics.avg_searches_per_date        // 3.75
// Para an√°lisis de d√≠as de semana preferidos:
const weekdayPreferences = upcomingData.top_upcoming_checkins
  .reduce((acc, date) => {
    acc[date.weekday] = (acc[date.weekday] || 0) + date.total_searches;
    return acc;
  }, {});
‚öôÔ∏è Subpesta√±a: Configuraci√≥n de An√°lisis
// Par√°metros de filtrado (para formularios):
const filterConfig = {
  days_ahead: {
    min: 1,
    max: 180,
    default: 60,
    step: 1
  },
  limit: {
    min: 1, 
    max: 100,
    default: 20,
    step: 5
  },
  include_anonymous: {
    type: 'boolean',
    default: true
  }
};
// URL din√°mica basada en filtros:
const buildUrl = (filters) => 
  `/api/v1/upcoming-checkins/?days_ahead=${filters.daysAhead}&limit=${filters.limit}&include_anonymous=${filters.includeAnonymous}`;
üîß ESTRUCTURAS DE DATOS PARA COMPONENTES
Para Gr√°ficos de L√≠neas (Tendencias)
// Datos para Chart.js/Recharts
const chartData = statsData.reservations_by_period.map(item => ({
  x: item.period,           // Eje X (fechas)
  y: item.reservations_count, // Eje Y (reservas)
  revenue: item.revenue     // Serie adicional
}));
Para Tablas de Ranking
// Tabla de propiedades m√°s exitosas
const propertyTable = statsData.properties_breakdown
  .sort((a,b) => b.total_revenue - a.total_revenue)
  .map((prop, index) => ({
    rank: index + 1,
    name: prop.property_name,
    revenue: prop.total_revenue,
    occupancy: `${prop.occupancy_rate}%`,
    avgPrice: prop.average_price
  }));
Para Cards de M√©tricas
// Cards de resumen
const summaryCards = [
  {
    title: "Total Reservas",
    value: statsData.total_reservations,
    growth: statsData.growth_metrics.reservations_growth,
    icon: "calendar"
  },
  {
    title: "Ingresos Totales", 
    value: `$${statsData.total_revenue.toLocaleString()}`,
    growth: statsData.growth_metrics.revenue_growth,
    icon: "dollar"
  }
];
Para Filtros Din√°micos
// Estado de filtros para ambos endpoints
const [filters, setFilters] = useState({
  // Para /api/v1/stats/
  dateFrom: '2025-09-01',
  dateTo: '2025-09-21', 
  period: 'week',
  
  // Para /api/v1/upcoming-checkins/
  daysAhead: 60,
  limit: 20,
  includeAnonymous: true
});